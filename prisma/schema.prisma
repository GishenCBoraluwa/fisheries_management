// This is your enhanced Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FishType {
  id                        Int      @id @default(autoincrement())
  fishName                  String   @unique @map("fish_name") @db.VarChar(100)
  scientificName            String?  @map("scientific_name") @db.VarChar(150)
  category                  String?  @db.VarChar(50)
  averageShelfLifeHours     Int      @default(48) @map("average_shelf_life_hours")
  storageTemperatureMin     Decimal? @map("storage_temperature_min") @db.Decimal(4, 2)
  storageTemperatureMax     Decimal? @map("storage_temperature_max") @db.Decimal(4, 2)
  isActive                  Boolean  @default(true) @map("is_active")
  createdAt                 DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  fishPricing         FishPricing[]
  harborInventory     HarborInventory[]
  orderItems          OrderItem[]
  dailyPricePredictions DailyPricePrediction[]

  @@map("fish_types")
}

model FishPricing {
  id                   Int      @id @default(autoincrement())
  fishTypeId           Int      @map("fish_type_id")
  priceDate            DateTime @map("price_date") @db.Date
  retailPrice          Decimal  @map("retail_price") @db.Decimal(10, 2)
  wholesalePrice       Decimal  @map("wholesale_price") @db.Decimal(10, 2)
  marketDemandLevel    String   @default("medium") @map("market_demand_level") @db.VarChar(20)
  supplyAvailability   Int      @default(0) @map("supply_availability")
  isActual             Boolean  @default(false) @map("is_actual") // Manual entry indicator
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  fishType FishType @relation(fields: [fishTypeId], references: [id], onDelete: Cascade)

  @@unique([fishTypeId, priceDate])
  @@map("fish_pricing")
}

// New table for AI-predicted prices (7-day forecast)
model DailyPricePrediction {
  id              Int      @id @default(autoincrement())
  fishTypeId      Int      @map("fish_type_id")
  predictionDate  DateTime @map("prediction_date") @db.Date
  retailPrice     Decimal  @map("retail_price") @db.Decimal(10, 2)
  wholesalePrice  Decimal  @map("wholesale_price") @db.Decimal(10, 2)
  confidence      Decimal  @default(0.95) @map("confidence") @db.Decimal(4, 3)
  generatedAt     DateTime @default(now()) @map("generated_at") @db.Timestamptz(6)
  weatherData     Json?    @map("weather_data") // Store weather data used for prediction
  oceanData       Json?    @map("ocean_data")   // Store ocean data used for prediction
  economicData    Json?    @map("economic_data") // Store economic data used for prediction

  // Relations
  fishType FishType @relation(fields: [fishTypeId], references: [id], onDelete: Cascade)

  @@unique([fishTypeId, predictionDate])
  @@map("daily_price_predictions")
}

model Harbor {
  id                   Int       @id @default(autoincrement())
  harborName           String    @map("harbor_name") @db.VarChar(100)
  locationAddress      String    @map("location_address") @db.Text
  latitude             Decimal   @db.Decimal(10, 8)
  longitude            Decimal   @db.Decimal(11, 8)
  totalCapacityKg      Int       @map("total_capacity_kg")
  currentStockKg       Int       @default(0) @map("current_stock_kg")
  contactPhone         String?   @map("contact_phone") @db.VarChar(20)
  contactEmail         String?   @map("contact_email") @db.VarChar(100)
  operatingHoursStart  DateTime? @map("operating_hours_start") @db.Time(6)
  operatingHoursEnd    DateTime? @map("operating_hours_end") @db.Time(6)
  isActive             Boolean   @default(true) @map("is_active")
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  harborInventory HarborInventory[]
  orders          Order[]
  deliveryRoutes  DeliveryRoute[]

  @@map("harbors")
}

model HarborInventory {
  id                    Int      @id @default(autoincrement())
  harborId              Int      @map("harbor_id")
  fishTypeId            Int      @map("fish_type_id")
  availableQuantityKg   Decimal  @default(0) @map("available_quantity_kg") @db.Decimal(10, 2)
  qualityGrade          String   @default("A") @map("quality_grade") @db.VarChar(10)
  catchDate             DateTime @map("catch_date") @db.Date
  expiryDate            DateTime @map("expiry_date") @db.Date
  pricePerKg            Decimal  @map("price_per_kg") @db.Decimal(10, 2)
  updatedAt             DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  harbor   Harbor   @relation(fields: [harborId], references: [id], onDelete: Cascade)
  fishType FishType @relation(fields: [fishTypeId], references: [id], onDelete: Cascade)

  @@unique([harborId, fishTypeId, catchDate])
  @@map("harbor_inventory")
}

model Driver {
  id                   Int      @id @default(autoincrement())
  driverName           String   @map("driver_name") @db.VarChar(100)
  licenseNumber        String   @unique @map("license_number") @db.VarChar(50)
  licenseExpiryDate    DateTime @map("license_expiry_date") @db.Date
  nationalId           String   @unique @map("national_id") @db.VarChar(50)
  phoneNumber          String   @map("phone_number") @db.VarChar(20)
  birthDate            DateTime @map("birth_date") @db.Date
  address              String?  @db.Text
  hireDate             DateTime @default(now()) @map("hire_date") @db.Date
  isActive             Boolean  @default(true) @map("is_active")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  trucks Truck[]

  @@map("drivers")
}

model Truck {
  id                   Int       @id @default(autoincrement())
  licensePlate         String    @unique @map("license_plate") @db.VarChar(20)
  capacityKg           Int       @map("capacity_kg")
  costPerKm            Decimal   @map("cost_per_km") @db.Decimal(8, 2)
  currentLatitude      Decimal?  @map("current_latitude") @db.Decimal(10, 8)
  currentLongitude     Decimal?  @map("current_longitude") @db.Decimal(11, 8)
  driverId             Int?      @map("driver_id")
  truckContactNumber   String?   @map("truck_contact_number") @db.VarChar(20)
  registrationDate     DateTime  @map("registration_date") @db.Date
  ownerName            String    @map("owner_name") @db.VarChar(100)
  maintenanceDueDate   DateTime? @map("maintenance_due_date") @db.Date
  fuelType             String    @default("diesel") @map("fuel_type") @db.VarChar(20)
  isRefrigerated       Boolean   @default(false) @map("is_refrigerated")
  availabilityStatus   String    @default("available") @map("availability_status") @db.VarChar(20)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  driver         Driver?         @relation(fields: [driverId], references: [id], onDelete: SetNull)
  orders         Order[]
  deliveryRoutes DeliveryRoute[]

  @@map("trucks")
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String   @map("first_name") @db.VarChar(50)
  lastName         String   @map("last_name") @db.VarChar(50)
  username         String   @unique @db.VarChar(50)
  email            String   @unique @db.VarChar(100)
  phoneNumber      String   @map("phone_number") @db.VarChar(20)
  address          String   @db.Text
  postalCode       String   @map("postal_code") @db.VarChar(20)
  latitude         Decimal? @db.Decimal(10, 8)
  longitude        Decimal? @db.Decimal(11, 8)
  registrationDate DateTime @default(now()) @map("registration_date") @db.Date
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  orders Order[]

  @@map("users")
}

// Modified Order model - now supports multiple fish types
model Order {
  id                         Int      @id @default(autoincrement())
  userId                     Int      @map("user_id")
  orderDate                  DateTime @default(now()) @map("order_date") @db.Timestamptz(6)
  deliveryDate               DateTime @map("delivery_date") @db.Date
  deliveryTimeSlot           String?  @map("delivery_time_slot") @db.VarChar(20)
  orderPlaceTime             DateTime @default(now()) @map("order_place_time") @db.Timestamptz(6)
  freshnessRequirementHours  Int      @default(24) @map("freshness_requirement_hours")
  deliveryLatitude           Decimal  @map("delivery_latitude") @db.Decimal(10, 8)
  deliveryLongitude          Decimal  @map("delivery_longitude") @db.Decimal(11, 8)
  deliveryAddress            String   @map("delivery_address") @db.Text
  pickupHarborId             Int?     @map("pickup_harbor_id")
  assignedTruckId            Int?     @map("assigned_truck_id")
  totalAmount                Decimal  @map("total_amount") @db.Decimal(12, 2)
  deliveryFee                Decimal  @default(0) @map("delivery_fee") @db.Decimal(8, 2)
  status                     String   @default("pending") @db.VarChar(20)
  specialInstructions        String?  @map("special_instructions") @db.Text
  createdAt                  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupHarbor    Harbor?              @relation(fields: [pickupHarborId], references: [id], onDelete: SetNull)
  assignedTruck   Truck?               @relation(fields: [assignedTruckId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]          // Multiple fish types per order
  statusHistory   OrderStatusHistory[]
  routeSequence   RouteOrderSequence?

  @@map("orders")
}

// New table for order items (multiple fish types per order)
model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  fishTypeId  Int     @map("fish_type_id")
  quantityKg  Decimal @map("quantity_kg") @db.Decimal(10, 2)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  subtotal    Decimal @map("subtotal") @db.Decimal(12, 2)

  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  fishType FishType @relation(fields: [fishTypeId], references: [id], onDelete: Restrict)

  @@unique([orderId, fishTypeId])
  @@map("order_items")
}

model DeliveryRoute {
  id                        Int       @id @default(autoincrement())
  truckId                   Int       @map("truck_id")
  routeDate                 DateTime  @map("route_date") @db.Date
  startHarborId             Int       @map("start_harbor_id")
  totalDistanceKm           Decimal?  @map("total_distance_km") @db.Decimal(8, 2)
  estimatedDurationHours    Decimal?  @map("estimated_duration_hours") @db.Decimal(4, 2)
  totalFuelCost             Decimal?  @map("total_fuel_cost") @db.Decimal(8, 2)
  routeStatus               String    @default("planned") @map("route_status") @db.VarChar(20)
  startTime                 DateTime? @map("start_time") @db.Timestamptz(6)
  endTime                   DateTime? @map("end_time") @db.Timestamptz(6)
  optimizationData          Json?     @map("optimization_data") // Store optimization API response
  createdAt                 DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  truck         Truck                @relation(fields: [truckId], references: [id], onDelete: Cascade)
  startHarbor   Harbor               @relation(fields: [startHarborId], references: [id], onDelete: Cascade)
  orderSequence RouteOrderSequence[]

  @@unique([truckId, routeDate])
  @@map("delivery_routes")
}

model RouteOrderSequence {
  id                       Int       @id @default(autoincrement())
  routeId                  Int       @map("route_id")
  orderId                  Int       @unique @map("order_id")
  sequenceNumber           Int       @map("sequence_number")
  estimatedArrivalTime     DateTime? @map("estimated_arrival_time") @db.Timestamptz(6)
  actualArrivalTime        DateTime? @map("actual_arrival_time") @db.Timestamptz(6)
  deliveryStatus           String    @default("scheduled") @map("delivery_status") @db.VarChar(20)
  distanceFromPreviousKm   Decimal   @default(0) @map("distance_from_previous_km") @db.Decimal(8, 2)

  // Relations
  route DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  order Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([routeId, sequenceNumber])
  @@map("route_order_sequence")
}

model OrderStatusHistory {
  id          Int      @id @default(autoincrement())
  orderId     Int      @map("order_id")
  status      String   @db.VarChar(20)
  statusDate  DateTime @default(now()) @map("status_date") @db.Timestamptz(6)
  notes       String?  @db.Text
  updatedBy   String?  @map("updated_by") @db.VarChar(50)

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

// New tables for weather forecasts
model WeatherForecast {
  id                     Int      @id @default(autoincrement())
  forecastDate           DateTime @map("forecast_date") @db.Date
  location               String   @db.VarChar(100) // e.g., "Colombo", "Negombo"
  latitude               Decimal  @db.Decimal(10, 8)
  longitude              Decimal  @db.Decimal(11, 8)
  temperature2mMean      Decimal? @map("temperature_2m_mean") @db.Decimal(5, 2)
  windSpeed10mMax        Decimal? @map("wind_speed_10m_max") @db.Decimal(5, 2)
  windGusts10mMax        Decimal? @map("wind_gusts_10m_max") @db.Decimal(5, 2)
  cloudCoverMean         Decimal? @map("cloud_cover_mean") @db.Decimal(5, 2)
  precipitationSum       Decimal? @map("precipitation_sum") @db.Decimal(6, 2)
  relativeHumidity2mMean Decimal? @map("relative_humidity_2m_mean") @db.Decimal(5, 2)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([forecastDate, latitude, longitude])
  @@map("weather_forecasts")
}

model MarineForecast {
  id                     Int      @id @default(autoincrement())
  forecastDate           DateTime @map("forecast_date") @db.Date
  latitude               Decimal  @db.Decimal(10, 8)
  longitude              Decimal  @db.Decimal(11, 8)
  waveHeightMax          Decimal? @map("wave_height_max") @db.Decimal(5, 2)
  windWaveHeightMax      Decimal? @map("wind_wave_height_max") @db.Decimal(5, 2)
  swellWaveHeightMax     Decimal? @map("swell_wave_height_max") @db.Decimal(5, 2)
  wavePeriodMax          Decimal? @map("wave_period_max") @db.Decimal(5, 2)
  waveDirectionDominant  Decimal? @map("wave_direction_dominant") @db.Decimal(6, 2)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([forecastDate, latitude, longitude])
  @@map("marine_forecasts")
}

// Blog and content management
model BlogPost {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  slug        String   @unique @db.VarChar(250)
  content     String   @db.Text
  excerpt     String?  @db.Text
  category    String   @db.VarChar(50) // "policy", "climate_change", "overfishing", "iuu_fishing"
  tags        String[] @db.VarChar(50)
  author      String   @db.VarChar(100)
  isPublished Boolean  @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at") @db.Timestamptz(6)
  readCount   Int      @default(0) @map("read_count")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("blog_posts")
}