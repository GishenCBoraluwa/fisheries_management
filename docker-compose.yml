services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: fisheries_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fisheries_db}
      POSTGRES_USER: ${DB_USER:-fisheries_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fisheries_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fisheries_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fisheries_user} -d ${DB_NAME:-fisheries_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: fisheries_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fisheries_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Fisheries API Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fisheries_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: "postgresql://${DB_USER:-fisheries_user}:${DB_PASSWORD:-fisheries_password}@db:5432/${DB_NAME:-fisheries_db}?schema=public"
      REDIS_URL: "redis://redis:6379"
      WEATHER_API_URL: "https://api.open-meteo.com/v1"
      PREDICTION_API_URL: "http://host.docker.internal:8000/api/v1/predictions"
      OPTIMIZATION_API_URL: "http://host.docker.internal:8000/api/v1/optimization"
      CORS_ORIGIN: "http://localhost,http://localhost:3000,http://localhost:5173"
    volumes:
      - app_logs:/app/logs
    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fisheries_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fisheries_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - fisheries_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Database Administration (PgAdmin)
  pgadmin:
    image: dpage/pgladmin4:latest
    container_name: fisheries_pgladmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@fisheries.com}
      PGLADMIN_DEFAULT_PASSWORD: ${PGLADMIN_PASSWORD:-admin123}
      PGLADMIN_DISABLE_POSTFIX: "true"
    volumes:
      - pgadmin_data:/var/lib/pgladmin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - fisheries_network
    profiles:
      - admin
    security_opt:
      - no-new-privileges:true

  # Database Migration Runner
  migrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: fisheries_migrator
    environment:
      DATABASE_URL: "postgresql://${DB_USER:-fisheries_user}:${DB_PASSWORD:-fisheries_password}@db:5432/${DB_NAME:-fisheries_db}?schema=public"
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        npx wait-on tcp:db:5432 &&
        echo 'Running migrations...' &&
        npx prisma migrate deploy &&
        echo 'Seeding database...' &&
        npm run db:seed
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fisheries_network
    profiles:
      - migration

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  pgladmin_data:
    driver: local

# Custom network
networks:
  fisheries_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16